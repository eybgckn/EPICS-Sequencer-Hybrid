program SysCheck
option +r;        /* gerçek zamanlı okuma için */
/* option -c;    Programın, pvlerin hepsinin bağlanmasını beklemeden çalıştırır. */

%{
#include <errlog.h>
}%
 
string mode;
assign mode to "{sys}:{sec}:{dev}:SET_MODE";
monitor mode;

double current;
assign current to "{sys}:{sec}:{dev}:SET_CURRENT";               
monitor current;

double volt;
assign volt to "{sys}:{sec}:{dev}:SET_VOLT";
monitor volt;


%{


    static const char*   OPEN_LOOP      = "Open-Loop";
    static const double SAFE_VOLTAGE     = 10.0;
    static const double VOLTAGE_DROP_STEP = 1.0;

    static int isOpenLoop(const char *mode);
    static int decreaseVoltage(double *voltage);

    static int isOpenLoop(const char *mode) {
        return (mode && strcmp(mode, OPEN_LOOP) == 0);
    }

    static int decreaseVoltage(double *voltage) {
        if (!voltage) {
            return 0;
        }

        if (*voltage > SAFE_VOLTAGE) {
            double delta = *voltage - SAFE_VOLTAGE;
            double step   = (delta < VOLTAGE_DROP_STEP)
                            ? delta
                            : VOLTAGE_DROP_STEP;
            *voltage -= step;

            errlogSevPrintf(errlogInfo,
                            " Gerilim azaltildi: %.2f V\n",
                            *voltage);
            return 1;
        }

        errlogSevPrintf(errlogInfo,
                        "Gerilim guvenli seviyede: %.2f V\n",
                        *voltage);
        return 0;
    }
}%

 

ss Monitor {
    
    string lastMode;
    double lastCurrent;
    double lastVolt;

    int safeLogged = 0;      /*mesajı gereksiz tekrarları engellemek için yalnızca bir kez yazılır.*/

    state init {
        

        entry {
            pvGet(mode);
            pvGet(current);           
            pvGet(volt); 
            
            strcpy(lastMode, mode);
            lastCurrent = current;
            lastVolt    = volt;

            errlogSevPrintf(errlogInfo,
                "Başlangıç: Volt=%.2f, Akım=%.2f, Mod=%s\n", volt, current, mode);
        }
        when (1) {
        } state observation
    }

   state observation {
        
        when (strcmp(mode, lastMode) != 0) {
            pvGet(mode);
            errlogSevPrintf(errlogInfo, "Dongu modu degistirildi: %s\n", mode);
            strcpy(lastMode, mode);
        } state Polling

        when (current != lastCurrent) {
            pvGet(current);
            if (current != lastCurrent) {
                errlogSevPrintf(errlogInfo, "Akim degistirildi: %.2f\n", current);
                lastCurrent = current;
            }
        } state Polling

        when (volt != lastVolt) {
            pvGet(volt);
            if (volt != lastVolt) {
                errlogSevPrintf(errlogInfo, "Gerilim degistirildi: %.2f\n", volt);
                lastVolt = volt;
            }
        } state Polling
    }

    state Polling {
        option -t;

        when (volt <= SAFE_VOLTAGE && !safeLogged) {
            errlogSevPrintf(errlogInfo, "Gerilim seviyesi guvenlidir: %.2f V\n", volt);
            safeLogged = 1;

        } state observation

        when (delay(0.1)) {
            pvGet(mode);   
            pvGet(current);
            pvGet(volt);

            if (current >= 0.99 && isOpenLoop(mode) && volt > SAFE_VOLTAGE) {
                double v = volt;
                if (decreaseVoltage(&v)) {
                    volt = v;
                    pvPut(volt);           /* sadece değişiklik olduğunda yaz */
                    lastVolt = volt;           /* takip değerini güncelle */
                    safeLogged = 0;        /* hala güvenli değilse safeLogged sıfırla */
                }
            } 
        } state Polling
    }
     
}
  
        
        
    




/* 

Bu bölüm "if" ifadelerini "durum" ifadelerine bağlayan geçiş formatı hakkında bilgi edinilmek için bulunmuş ve kullanılmıştır. 
Bu teknik 2 farklı "state" halindeki 2 "when" ifadesindeki delay fonksiyonun (0.1 saniyede) çalışma çakışmasını engellemek için edinilmiştir.
Bu çakışma istenilen süreyi saptırabilir. Bu yüzden bu format ele alınarak "state Polling" durumu  altında "state voltage drop" fonksiyonları yerleştirilerek 
tek bir durum ifadesi altında çalışılacaktır, "state voltage_drop" kaldırılmıştır.

ss generate_voltage {
    state init {
        when (efTestAndClear(ef1)) {
            printf("start ramp\n");
            fdprintf(fd, "start ramp\n");
            delta = 0.2;
        } state ramp
    }


    state ramp {
        when (delay(0.1)) {
            if ((delta > 0.0 && ao2 >= 11.0) ||
                (delta < 0.0 && ao2 <= -11.0)) {
                delta = -delta;
            }
            ao2 += delta;
            pvPut(ao2);
        } state ramp

        when (efTestAndClear(ef2)) {
        } state init
    }
}
*/